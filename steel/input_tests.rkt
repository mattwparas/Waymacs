1
(+ 1 1)
#f
())
(define (fac n) (if (= n 1) 1 (* n (fac (- n 1)))))
(fac 5)
(define (fib n) (if (<= n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))
(fib 10)
(define (fib-helper a b n) (if (= n 0) a (fib-helper b (+ a b) (- n 1))))
(define (fib n) (fib-helper 0 1 n))
(fib 60)
(define my-func (lambda (arg1 arg2) (lambda (b) (+ arg1 arg2 b))))
((my-func 1 2) 3)
(define foo (lambda (w) (lambda (x) (lambda (y) (lambda (z) (+ w x y z))))))
((((foo 1) 2) 3) 4)
(number? (+ 1 2))
(number? "foo")
(string? "ye")
(string? (- 1 2))
(symbol? 'a)
(symbol? "nop")
(vector? '(1 2 3))
(list? 'a)
(define make-account (lambda (balance) (lambda (amt) (begin (set! balance (+ balance amt)) balance))))
(define account1 (make-account 100.00))
(account1 -20.00)
(account1 -20.00)